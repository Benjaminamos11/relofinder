---
import Header from '../components/common/Header.astro';
import Footer from '../components/common/Footer.astro';
import SEOHead from '../components/common/SEOHead.astro';
import '../styles/global.css';
import { ViewTransitions } from 'astro:transitions';
import UniversalContactModal from '../components/common/UniversalContactModal.tsx';

export interface Props {
  title?: string;
  description?: string;
  image?: string;
  canonical?: string;
  keywords?: string[];
  schema?: any;
}

const { 
  title = 'ReloFinder.ch | Swiss Relocation Services for Expats',
  description = 'Find the best relocation services, companies, and information about regions in Switzerland for expats looking to relocate.',
  image = '/images/relofinder-og.jpg',
  canonical,
  keywords = ['relocation switzerland', 'swiss relocation services', 'moving to switzerland', 'expat services switzerland'],
  schema
} = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="shortcut icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="manifest" href="/site.webmanifest" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- Enhanced SEO Meta Tags -->
    <SEOHead 
      title={title}
      description={description}
      canonical={canonical}
      keywords={keywords}
      schema={schema}
      openGraph={{
        title: title,
        description: description,
        image: image,
        type: 'website'
      }}
      twitter={{
        card: 'summary_large_image',
        site: '@relofinder',
        title: title,
        description: description,
        image: image
      }}
    />
    
    <!-- Fonts - Optimized for Performance -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    
    <!-- Preload critical fonts -->
    <link rel="preload" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&family=Montserrat:wght@500;600;700&display=swap" as="style" onload="this.onload=null;this.rel='stylesheet'">
    <noscript><link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&family=Montserrat:wght@500;600;700&display=swap" rel="stylesheet"></noscript>
    
    <!-- Resource hints for better performance -->
    <link rel="dns-prefetch" href="//res.cloudinary.com">
    <link rel="dns-prefetch" href="//images.unsplash.com">
    
    <!-- Preload critical LCP image for mobile -->
    <link rel="preload" as="image" href="https://res.cloudinary.com/dphbnwjtx/image/upload/w_400,h_300,c_fill,f_webp,q_auto:good/v1748002920/a-humorous-slightly-quirky-photograph-of_E3yQygvrSj2lK35PvdcPXA_jo8EU6MaTSePalCxA1yBzA_hnzcxp.webp" media="(max-width: 640px)">
    <link rel="preload" as="image" href="https://res.cloudinary.com/dphbnwjtx/image/upload/w_600,h_400,c_fill,f_webp,q_auto:good/v1748002920/a-humorous-slightly-quirky-photograph-of_E3yQygvrSj2lK35PvdcPXA_jo8EU6MaTSePalCxA1yBzA_hnzcxp.webp" media="(min-width: 641px)">
  </head>
  <body class="min-h-screen flex flex-col bg-gray-50">
    <Header />
    
    <main class="flex-grow">
      <slot />
    </main>
    
    <Footer />
    <UniversalContactModal client:load />
    
    <!-- Global Modal Functions with Event Queue -->
    <script is:inline>
      // Event queue for modal events before React component loads
      window.modalEventQueue = [];
      window.modalReady = false;
      
      // Global modal functions that queue events if React component isn't ready
      window.openModal = function(context = {}) {
        const event = new CustomEvent('openModal', { detail: context });
        
        if (window.modalReady) {
          // React component is ready, dispatch immediately
          window.dispatchEvent(event);
        } else {
          // Queue the event for when React component loads
          window.modalEventQueue.push(event);
          console.log('Modal not ready, queuing open event:', context);
        }
      };
      
      window.closeModal = function() {
        const event = new CustomEvent('closeModal');
        
        if (window.modalReady) {
          window.dispatchEvent(event);
        } else {
          window.modalEventQueue.push(event);
          console.log('Modal not ready, queuing close event');
        }
      };
      
      // Function to process queued events when React component is ready
      window.processModalQueue = function() {
        window.modalReady = true;
        console.log('Processing', window.modalEventQueue.length, 'queued modal events');
        
        window.modalEventQueue.forEach(event => {
          window.dispatchEvent(event);
        });
        
        window.modalEventQueue = [];
      };
    </script>
  </body>
</html>