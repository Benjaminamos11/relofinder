---
import Header from '../components/common/Header.astro';
import Footer from '../components/common/Footer.astro';
import SEOHead from '../components/common/SEOHead.astro';
import '../styles/global.css';
import { ViewTransitions } from 'astro:transitions';
import UniversalContactModal from '../components/common/UniversalContactModal.tsx';

export interface Props {
  title?: string;
  description?: string;
  image?: string;
  canonical?: string;
  keywords?: string[];
  schema?: any;
  openGraph?: {
    title?: string;
    description?: string;
    image?: string;
    type?: string;
    url?: string;
  };
  twitter?: {
    card?: string;
    site?: string;
    title?: string;
    description?: string;
    image?: string;
  };
}

const { 
  title = 'ReloFinder.ch | Swiss Relocation Services for Expats',
  description = 'Find the best relocation services, companies, and information about regions in Switzerland for expats looking to relocate.',
  image = '/images/relofinder-og.jpg',
  canonical,
  keywords = ['relocation switzerland', 'swiss relocation services', 'moving to switzerland', 'expat services switzerland'],
  schema,
  openGraph,
  twitter
} = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="shortcut icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="manifest" href="/site.webmanifest" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- Enhanced SEO Meta Tags -->
    <SEOHead 
      title={title}
      description={description}
      canonical={canonical}
      keywords={keywords}
      schema={schema}
      openGraph={{
        title: openGraph?.title ?? title,
        description: openGraph?.description ?? description,
        image: openGraph?.image ?? image,
        type: openGraph?.type ?? 'website',
        url: openGraph?.url
      }}
      twitter={{
        card: twitter?.card ?? 'summary_large_image',
        site: twitter?.site ?? '@relofinder',
        title: twitter?.title ?? title,
        description: twitter?.description ?? description,
        image: twitter?.image ?? image
      }}
    />
    
    <!-- Fonts - Optimized for Performance -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    
    <!-- Preload critical fonts -->
    <link rel="preload" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&family=Montserrat:wght@500;600;700&display=swap" as="style" onload="this.onload=null;this.rel='stylesheet'">
    <noscript><link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&family=Montserrat:wght@500;600;700&display=swap" rel="stylesheet"></noscript>
    
    <!-- Preconnect to critical origins for LCP improvement -->
    <link rel="preconnect" href="https://plausible.io">
    <link rel="preconnect" href="https://res.cloudinary.com">
    
    <!-- Resource hints for better performance -->
    <link rel="dns-prefetch" href="//images.unsplash.com">
    
    <!-- Preload critical LCP image for mobile -->
    <link rel="preload" as="image" href="https://res.cloudinary.com/dphbnwjtx/image/upload/w_400,h_300,c_fill,f_webp,q_auto:good/v1748002920/a-humorous-slightly-quirky-photograph-of_E3yQygvrSj2lK35PvdcPXA_jo8EU6MaTSePalCxA1yBzA_hnzcxp.webp" media="(max-width: 640px)">
    <link rel="preload" as="image" href="https://res.cloudinary.com/dphbnwjtx/image/upload/w_600,h_400,c_fill,f_webp,q_auto:good/v1748002920/a-humorous-slightly-quirky-photograph-of_E3yQygvrSj2lK35PvdcPXA_jo8EU6MaTSePalCxA1yBzA_hnzcxp.webp" media="(min-width: 641px)">
    
    <!-- Plausible Analytics (lightweight and privacy-friendly) -->
    <script defer data-domain="relofinder.ch" src="https://plausible.io/js/script.js"></script>
  </head>
  <body class="min-h-screen flex flex-col bg-gray-50">
    <Header />
    
    <main class="flex-grow">
      <slot />
    </main>
    
    <Footer />
    <UniversalContactModal client:load />
    
    <!-- Enhanced Global Modal Functions with Mobile Support -->
    <script is:inline>
      // Event queue for modal events before React component loads
      window.modalEventQueue = window.modalEventQueue || [];
      window.modalReady = window.modalReady || false;
      window.modalRetryCount = window.modalRetryCount || 0;
      
      // Enhanced global modal functions with mobile touch support
      window.universalOpenModal = function(context) {
        console.log('📞 universalOpenModal called', context, 'Device:', navigator.userAgent.includes('Mobile') ? 'Mobile' : 'Desktop');
        
        const event = new CustomEvent('openModal', { detail: context });
        
        if (window.modalReady) {
          console.log('✅ Modal ready, dispatching immediately');
          window.dispatchEvent(event);
        } else {
          console.log('⏳ Modal not ready, queuing event');
          window.modalEventQueue.push(event);
          
          // More aggressive retry for mobile devices
          const retryDelay = navigator.userAgent.includes('Mobile') ? 1000 : 2000;
          const maxRetries = navigator.userAgent.includes('Mobile') ? 5 : 3;
          
          setTimeout(() => {
            if (!window.modalReady && window.modalRetryCount < maxRetries) {
              window.modalRetryCount++;
              console.warn(`⚠️ Modal retry ${window.modalRetryCount}/${maxRetries}, forcing dispatch`);
              window.dispatchEvent(event);
              
              // If still not working, try direct DOM manipulation as fallback
              if (window.modalRetryCount >= maxRetries) {
                console.error('🚨 Modal system failed, attempting direct fallback');
                // Create a simple alert as ultimate fallback
                alert('Please contact us at hello@relofinder.ch for relocation assistance.');
              }
            }
          }, retryDelay);
        }
      };
      
      window.closeModal = function() {
        console.log('🚪 closeModal called');
        const event = new CustomEvent('closeModal');
        
        if (window.modalReady) {
          window.dispatchEvent(event);
        } else {
          window.modalEventQueue.push(event);
        }
      };
      
      // Enhanced function to process queued events when React component is ready
      window.processModalQueue = function() {
        console.log('🚀 Processing modal queue:', window.modalEventQueue.length, 'events');
        window.modalReady = true;
        window.modalRetryCount = 0; // Reset retry count on success
        
        window.modalEventQueue.forEach(event => {
          window.dispatchEvent(event);
        });
        
        window.modalEventQueue = [];
      };
      
      // Enhanced safety check with mobile-specific timing
      const safetyDelay = navigator.userAgent.includes('Mobile') ? 5000 : 3000;
      setTimeout(() => {
        if (!window.modalReady) {
          console.warn('⚠️ UniversalContactModal not ready after', safetyDelay + 'ms');
          console.warn('Device:', navigator.userAgent.includes('Mobile') ? 'Mobile' : 'Desktop');
          console.warn('User Agent:', navigator.userAgent);
        } else {
          console.log('✅ Modal system initialized successfully');
        }
      }, safetyDelay);
      
      // Add touch event support for mobile buttons
      document.addEventListener('DOMContentLoaded', function() {
        // Add touch event listeners to all buttons with onclick="universalOpenModal"
        const buttons = document.querySelectorAll('button[onclick*="universalOpenModal"]');
        buttons.forEach(button => {
          // Add touchstart event for immediate response on mobile
          button.addEventListener('touchstart', function(e) {
            console.log('📱 Touch event on button:', button);
            // Don't prevent default to allow normal click behavior
          }, { passive: true });
          
          // Add touchend event for better mobile responsiveness
          button.addEventListener('touchend', function(e) {
            console.log('📱 Touch end on button:', button);
            // Small delay to ensure touch is processed
            setTimeout(() => {
              if (button.onclick) {
                button.onclick(e);
              }
            }, 50);
          }, { passive: true });
        });
        
        console.log('📱 Added touch event listeners to', buttons.length, 'buttons');
      });
    </script>
  </body>
</html>