---
export interface Props {
  src: string;
  alt: string;
  class?: string;
  width?: number;
  height?: number;
  loading?: 'lazy' | 'eager';
  quality?: 'auto' | number;
  format?: 'auto' | 'webp' | 'jpg' | 'png';
  crop?: 'fill' | 'fit' | 'scale' | 'crop';
  gravity?: 'auto' | 'face' | 'center';
  priority?: boolean; // For LCP optimization
}

const {
  src,
  alt,
  class: className = '',
  width = 800,
  height,
  loading = 'lazy',
  quality = 'auto',
  format = 'auto',
  crop = 'fill',
  gravity = 'auto',
  priority = false
} = Astro.props;

// Check if it's a Cloudinary URL
const isCloudinaryUrl = src.includes('cloudinary.com') || src.includes('res.cloudinary.com');

let optimizedSrc = src;
let srcSet = '';
let avifSrcSet = '';
let webpSrcSet = '';

if (isCloudinaryUrl) {
  try {
    // Extract base URL and public ID from Cloudinary URL
    const urlParts = src.split('/upload/');
    if (urlParts.length === 2) {
      const baseUrl = urlParts[0] + '/upload/';
      const pathAfterUpload = urlParts[1];
      
      // Remove any existing transformations (if they exist)
      const publicIdParts = pathAfterUpload.split('/');
      const publicId = publicIdParts[publicIdParts.length - 1];
      
      // Build transformation parameters with advanced compression
      const transforms: string[] = [];
      
      // Enhanced quality and format optimization with higher compression for mobile
      // Use q_auto:eco for mobile (smaller files) and q_auto:good for desktop
      const qualityParam = width <= 640 ? 'q_auto:eco' : 'q_auto:good';
      transforms.push(qualityParam);
      
      // Responsive sizing with crop
      if (height) {
        transforms.push(`w_${width},h_${height},c_${crop}`);
      } else {
        transforms.push(`w_${width},c_${crop}`);
      }
      
      // Gravity for smart cropping
      if (gravity && gravity !== 'auto') {
        transforms.push(`g_${gravity}`);
      }
      
      // DPR (Device Pixel Ratio) for retina displays
      transforms.push('dpr_auto');
      
      // Additional performance optimizations
      transforms.push('fl_progressive'); // Progressive JPEG
      transforms.push('fl_immutable_cache'); // Better caching
      
      const baseTransformString = transforms.join(',');
      
      // Create optimized srcSets for different formats
      // Use smaller sizes for better mobile performance (match actual display sizes)
      const sizes = [320, 384, 640, 768, 1024, 1280];
      const relevantSizes = sizes.filter(size => size <= width * 1.5); // Limit to 1.5x for better perf
      
      // AVIF format (best compression, modern browsers)
      avifSrcSet = relevantSizes.map(size => {
        const sizeTransforms = transforms.map((t: string) => {
          if (t.startsWith('w_')) {
            return `w_${size}`;
          }
          return t;
        });
        return `${baseUrl}f_avif,${sizeTransforms.join(',')}/${publicId} ${size}w`;
      }).join(', ');
      
      // WebP format (good compression, wide support)
      webpSrcSet = relevantSizes.map(size => {
        const sizeTransforms = transforms.map((t: string) => {
          if (t.startsWith('w_')) {
            return `w_${size}`;
          }
          return t;
        });
        return `${baseUrl}f_webp,${sizeTransforms.join(',')}/${publicId} ${size}w`;
      }).join(', ');
      
      // Default format srcSet
      srcSet = relevantSizes.map(size => {
        const sizeTransforms = transforms.map((t: string) => {
          if (t.startsWith('w_')) {
            return `w_${size}`;
          }
          return t;
        });
        const formatParam = format === 'auto' ? 'f_auto' : `f_${format}`;
        return `${baseUrl}${formatParam},${sizeTransforms.join(',')}/${publicId} ${size}w`;
      }).join(', ');
      
      // Main optimized source
      const formatParam = format === 'auto' ? 'f_auto' : `f_${format}`;
      optimizedSrc = `${baseUrl}${formatParam},${baseTransformString}/${publicId}`;
    }
  } catch (error) {
    // Fallback to original URL if transformation fails
    console.warn('Cloudinary transformation failed, using original URL:', error);
    optimizedSrc = src;
    srcSet = '';
  }
}

// Enhanced sizes attribute for better responsive loading
// More accurate viewport-based sizing for mobile-first approach
const responsiveSizes = priority 
  ? '(max-width: 640px) 100vw, (max-width: 768px) 90vw, (max-width: 1024px) 80vw, 70vw'
  : '(max-width: 384px) 364px, (max-width: 640px) 90vw, (max-width: 768px) 80vw, (max-width: 1024px) 70vw, 60vw';

// Determine optimal loading strategy
const finalLoading = priority ? 'eager' : loading;
const fetchPriority = priority ? 'high' : 'auto';
---

<!-- Enhanced picture element for better format support and performance -->
{isCloudinaryUrl ? (
  <picture>
    <!-- AVIF format for modern browsers (best compression) -->
    {avifSrcSet && (
      <source 
        srcset={avifSrcSet} 
        sizes={responsiveSizes}
        type="image/avif"
      />
    )}
    
    <!-- WebP format for wide browser support -->
    {webpSrcSet && (
      <source 
        srcset={webpSrcSet} 
        sizes={responsiveSizes}
        type="image/webp"
      />
    )}
    
    <!-- Fallback image with optimized srcset -->
    <img
      src={optimizedSrc}
      srcset={srcSet || undefined}
      sizes={srcSet ? responsiveSizes : undefined}
      alt={alt}
      class={className}
      loading={finalLoading}
      fetchpriority={fetchPriority}
      width={width}
      height={height}
      decoding="async"
      onerror="this.src='https://images.unsplash.com/photo-1578662996442-48f60103fc96?ixlib=rb-4.0.3&w=800&q=80'"
    />
  </picture>
) : (
  <!-- Non-Cloudinary images -->
  <img
    src={optimizedSrc}
    alt={alt}
    class={className}
    loading={finalLoading}
    fetchpriority={fetchPriority}
    width={width}
    height={height}
    decoding="async"
    onerror="this.src='https://images.unsplash.com/photo-1578662996442-48f60103fc96?ixlib=rb-4.0.3&w=800&q=80'"
  />
)} 